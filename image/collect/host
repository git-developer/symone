#!/bin/bash
set -eu

COLLECTOR_PUBLISHER="${COLLECTOR_PUBLISHER:-echo}"
COLLECTOR_HOST="${COLLECTOR_HOST:-true}"
COLLECTOR_HOST_COLLECTORS_PATH="${COLLECTOR_HOST_COLLECTORS_PATH:-/opt/symone/host-collectors}"
COLLECTOR_HOST_RUNTIME_PATH="${COLLECTOR_HOST_RUNTIME_PATH:-/var/run/symone}"
COLLECTOR_HOST_DATA_PATH="${COLLECTOR_HOST_DATA_PATH:-${COLLECTOR_HOST_RUNTIME_PATH}/data}"
COLLECTOR_HOST_PIPE="${COLLECTOR_HOST_PIPE:-${COLLECTOR_HOST_RUNTIME_PATH}/host-monitor}"
COLLECTOR_HOST_PIPE_TIMEOUT="${COLLECTOR_HOST_PIPE_TIMEOUT:-1}"

host_log() {
  echo >&2 "$@"
}

host_warn() {
  host_log "WARNING: $@"
}

host_publish() {
  "${COLLECTOR_PUBLISHER}" "${@}"
}

host_process() {
  id="${1}"
  file="${COLLECTOR_HOST_DATA_PATH}/${id}"

  if [ -p "${COLLECTOR_HOST_PIPE}" ]; then
    if [ ! -e "${file}" ]; then
      mkfifo "${file}"
    fi
    if ! echo collect "${id}" | timeout "${COLLECTOR_HOST_PIPE_TIMEOUT}" tee "${COLLECTOR_HOST_PIPE}" >/dev/null; then
      host_warn "Command was not read from ${COLLECTOR_HOST_PIPE} within ${COLLECTOR_HOST_PIPE_TIMEOUT}s"
    fi
  fi

  if [ -r "${file}" ]; then
    while IFS='' read -r item; do
      declare -a parts="(${item})"
      host_publish "${parts[@]}"
    done <"${file}"
    rm "${file}"
  fi
}

host_collect() {
  if [ "${COLLECTOR_HOST}" != 'true' ] \
  || [ ! -d "${COLLECTOR_HOST_COLLECTORS_PATH}" ] \
  || [ ! -d "${COLLECTOR_HOST_DATA_PATH}" ]; then
    return
  fi

  if [ ! -p "${COLLECTOR_HOST_PIPE}" ]; then
    host_warn "Skipping host collector because there is no monitor for ${COLLECTOR_HOST_PIPE}"
    host_warn "Please make sure that the service is running on the host."
    return 1
  fi

  find "${COLLECTOR_HOST_COLLECTORS_PATH}" -mindepth 1 -type f -executable | while read -r command_file; do
    id="${command_file##${COLLECTOR_HOST_COLLECTORS_PATH}}"
    id="${id##/}"

    host_process "${id}"
  done
}

host_collect
